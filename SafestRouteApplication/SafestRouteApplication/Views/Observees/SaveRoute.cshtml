@model  SafestRouteApplication.Models.SavedRoute
@{
    ViewBag.Title = "Save Route";
    TempData.Keep("myRoute");
}

<div class="row">
    <div class="col-md-4">
        <br/>
        <div class="SideBar">
            @Html.ActionLink(" • Leave a Comment", "LeaveComment", "Observees", new { @class = "ActionClass" }) <br />
            @Html.ActionLink(" • Add/Change an Observer on Your Account", "ChangeObserver", "Observees", new { @class = "ActionClass" }) <br />
            @Html.ActionLink(" • Edit Account Info", "Edit", "Observees", new { @class = "ActionClass" }) <br />
            @Html.ActionLink(" • View Account Info", "Details", "Observees", new { @class = "ActionClass" })<br />
            @Html.ActionLink(" • Navigate a Route", "Navigate", "Observees", new { @class = "ActionClass" })<br />
        </div>

        <div class="HomePageHeader">
            <h3>Name This Route: </h3>
        </div>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                <div class="col-md-10">
                    @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    <br />
                    <input type="submit" value="Save Route" class="btn btn-default" />
                </div>
            </div>
        }
        </div>
    <div class="col-md-8">
        <br/>
        <div id="map"></div>
        
        <script>
        var platform = new H.service.Platform({
            'app_id': 'Ic57q8KhWDvrpuK1lsP6',
            'app_code': 'qrVujTnPZqcdy1pVuimZrQ'
        });
        // Retrieve the target element for the map:
        var targetElement = document.getElementById('map');
        // Get the default map types from the platform object:
        var defaultLayers = platform.createDefaultLayers();
        // Instantiate the map:
        var map = new H.Map(
            document.getElementById('map'),
            defaultLayers.normal.map,
            {
                zoom: 10,
                center: { lat: 52.51, lng: 13.4 }
            });
        // Create the parameters for the routing request:
        var routingParameters = {
            // The routing mode:
            'mode': 'fastest;pedestrian;traffic:disabled',
            // The start point of the route:
            'waypoint0': 'geo!@Model.waypoint1',
            // The end point of the route:
            'waypoint1': 'geo!@Model.waypoint2',
            // To retrieve the shape of the route we choose the route
            // representation mode 'display'
            'avoidareas': '@Model.avoidstring',
            'representation': 'display'
        };
        //43.038779, -87.914753
        //43.035961, -87.910161
        // Define a callback function to process the routing response:
        var onResult = function (result) {
            var route,
                routeShape,
                startPoint,
                endPoint,
                linestring;
            if (result.response.route) {
                // Pick the first route from the response:
                route = result.response.route[0];
                // Pick the route's shape:
                routeShape = route.shape;
                // Create a linestring to use as a point source for the route line
                linestring = new H.geo.LineString();
                // Push all the points in the shape into the linestring:
                routeShape.forEach(function (point) {
                    var parts = point.split(',');
                    linestring.pushLatLngAlt(parts[0], parts[1]);
                });
                // Retrieve the mapped positions of the requested waypoints:
                startPoint = route.waypoint[0].mappedPosition;
                endPoint = route.waypoint[1].mappedPosition;
                // Create a polyline to display the route:
                var routeLine = new H.map.Polyline(linestring, {
                    style: { strokeColor: 'blue', lineWidth: 10 }
                });
                // Create a marker for the start point:
                var startMarker = new H.map.Marker({
                    lat: startPoint.latitude,
                    lng: startPoint.longitude
                });
                // Create a marker for the end point:
                var endMarker = new H.map.Marker({
                    lat: endPoint.latitude,
                    lng: endPoint.longitude
                });
                // Add the route polyline and the two markers to the map:
                map.addObjects([routeLine, startMarker, endMarker]);
                // Set the map's viewport to make the whole route visible:
                map.setViewBounds(routeLine.getBounds());
            }
        };
        // Get an instance of the routing service:
        var router = platform.getRoutingService();
        // Call calculateRoute() with the routing parameters,
        // the callback and an error callback function (called if a
        // communication error occurs):
        router.calculateRoute(routingParameters, onResult,
            function (error) {
                alert(error.message);
            });
                </script>
            </div>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }
        }
</div>

@*@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-group">
        <div class="col-md-10">
            @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        
        <script>
        var platform = new H.service.Platform({
            'app_id': 'Ic57q8KhWDvrpuK1lsP6',
            'app_code': 'qrVujTnPZqcdy1pVuimZrQ'
        });
        // Retrieve the target element for the map:
        var targetElement = document.getElementById('map');
        // Get the default map types from the platform object:
        var defaultLayers = platform.createDefaultLayers();
        // Instantiate the map:
        var map = new H.Map(
            document.getElementById('map'),
            defaultLayers.normal.map,
            {
                zoom: 10,
                center: { lat: 52.51, lng: 13.4 }
            });
        // Create the parameters for the routing request:
        var routingParameters = {
            // The routing mode:
            'mode': 'fastest;pedestrian;traffic:disabled',
            // The start point of the route:
            'waypoint0': 'geo!@Model.waypoint1',
            // The end point of the route:
            'waypoint1': 'geo!@Model.waypoint2',
            // To retrieve the shape of the route we choose the route
            // representation mode 'display'
            'avoidareas': '@Model.avoidstring',
            'representation': 'display'
        };
        //43.038779, -87.914753
        //43.035961, -87.910161
        // Define a callback function to process the routing response:
        var onResult = function (result) {
            var route,
                routeShape,
                startPoint,
                endPoint,
                linestring;
            if (result.response.route) {
                // Pick the first route from the response:
                route = result.response.route[0];
                // Pick the route's shape:
                routeShape = route.shape;
                // Create a linestring to use as a point source for the route line
                linestring = new H.geo.LineString();
                // Push all the points in the shape into the linestring:
                routeShape.forEach(function (point) {
                    var parts = point.split(',');
                    linestring.pushLatLngAlt(parts[0], parts[1]);
                });
                // Retrieve the mapped positions of the requested waypoints:
                startPoint = route.waypoint[0].mappedPosition;
                endPoint = route.waypoint[1].mappedPosition;
                // Create a polyline to display the route:
                var routeLine = new H.map.Polyline(linestring, {
                    style: { strokeColor: 'blue', lineWidth: 10 }
                });
                // Create a marker for the start point:
                var startMarker = new H.map.Marker({
                    lat: startPoint.latitude,
                    lng: startPoint.longitude
                });
                // Create a marker for the end point:
                var endMarker = new H.map.Marker({
                    lat: endPoint.latitude,
                    lng: endPoint.longitude
                });
                // Add the route polyline and the two markers to the map:
                map.addObjects([routeLine, startMarker, endMarker]);
                // Set the map's viewport to make the whole route visible:
                map.setViewBounds(routeLine.getBounds());
            }
        };
        // Get an instance of the routing service:
        var router = platform.getRoutingService();
        // Call calculateRoute() with the routing parameters,
        // the callback and an error callback function (called if a
        // communication error occurs):
        router.calculateRoute(routingParameters, onResult,
            function (error) {
                alert(error.message);
            });
        </script>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save Route" class="btn btn-default" />
        </div>
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
}*@



